#version 460 core

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform image2D u_H0k;
layout(rgba32f, binding = 1) uniform image2D u_H0minusk;

float rand(vec2 co){
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

#define PI 3.141592653589793238

int N = 256;
int L = 1000;
float A = 20;
vec2 w = vec2(1, 0);
float windspeed = 26;

const float g = 9.81;

vec4 gaussRND()
{
    vec2 coords = vec2(gl_GlobalInvocationID.xy);

    float noise00 = clamp(rand(coords + vec2(23.11, 31.17)), 0.00001, 1.0);
    float noise01 = clamp(rand(coords + vec2(64.3, 32.7)), 0.00001, 1.0);
    float noise02 = clamp(rand(coords + vec2(22.19, 63.2)), 0.00001, 1.0);
    float noise03 = clamp(rand(coords + vec2(11.31, 5.11)), 0.00001, 1.0);

//    float noise00 = clamp(rand(coords + vec2(11, 17)), 0.00001, 1.0);
//    float noise01 = clamp(rand(coords + vec2(3, 7)), 0.00001, 1.0);
//    float noise02 = clamp(rand(coords + vec2(19, 2)), 0.00001, 1.0);
//    float noise03 = clamp(rand(coords + vec2(31, 11)), 0.00001, 1.0);

    float u0 = 2.0 * PI * noise00;
    float v0 = sqrt(-2.0 * log(noise01));
    float u1 = 2.0 * PI * noise02;
    float v1 = sqrt(-2.0 * log(noise03));

    vec4 rnd = vec4(v0 * cos(u0), v0 * sin(u0), v1 * cos(u1), v1 * sin(u1));

    return rnd;
}

void main()
{
    vec2 x = vec2(gl_GlobalInvocationID.xy);

    vec2 k = vec2(2.0 * PI * x.x/L, 2.0 * PI * x.y/L);

    float L_ = (windspeed * windspeed) / g;
    float mag = length(k);
    if(mag < 0.0001) mag = 0.0001;
    float magSq = mag * mag;

    float h0k = clamp(sqrt((A/(magSq*magSq))
    * pow(dot(normalize(k), normalize(w)), 4.0)
    * exp(-(1.0/(magSq * L_ * L_)))
    * exp(-magSq*pow(L/2000.0, 2.0)))/sqrt(2.0), 0.0, 10.0);

    float h0minusk = clamp(sqrt((A/(magSq*magSq))
    * pow(dot(normalize(-k), normalize(w)), 4.0)
    * exp(-(1.0/(magSq * L_ * L_)))
    * exp(-magSq * pow(L/2000.0, 2.0))) / sqrt(2.0), 0.0, 10.0);

    vec4 gauss_random = gaussRND();

    // red = real
    // green = im
    imageStore(u_H0k, ivec2(gl_GlobalInvocationID.xy), vec4(gauss_random.xy * h0k, 0, 1));
//    imageStore(u_H0minusk, ivec2(gl_GlobalInvocationID.xy), vec4(gauss_random.zw * h0minusk, 0, 1));
    imageStore(u_H0minusk, ivec2(gl_GlobalInvocationID.xy), vec4(gauss_random.zw * h0k, 0, 1));
}